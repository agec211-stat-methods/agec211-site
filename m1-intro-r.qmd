---
title: "Intro to R programming"
---

1.  R objects
2.  R packages
3.  Reading data in R
4.  Basic data wrangling

<a href="https://agec211-stat-methods.github.io/agec211-lecture/module1-intro-r" target="_blank" class="btn-slides">View slides in new window</a>

::: {.box style="padding-bottom:56.25%; position:relative; display:block; width: 100%"}
<iframe width="100%" height="100%" src="https://agec211-stat-methods.github.io/agec211-lecture/module1-intro-r" frameborder="0" allowfullscreen style="position:absolute; top:0; left: 0">

</iframe>
:::

:::: callout-tip
## Presentation keyboard shortcuts

::: text-line-space
<ul>

<li>Use <kbd>←</kbd> and <kbd>→</kbd> to navigate through the slides</li>

<li>Use <kbd>F</kbd> to toggle full screen</li>

<li>Use <kbd>O</kbd> to view an overview of all slides</li>

<li>Use <kbd>?</kbd> to see a list of other shortcuts</li>

</ul>
:::
::::

<br>

## Exercises

1.  Install [R](https://cran.r-project.org/bin/windows/base/) and [RStudio](https://posit.co/download/rstudio-desktop/) on your computer.

<<<<<<< HEAD
2.  Download the entire folder `00-module-intro-r` from the [Google Drive link](https://drive.google.com/drive/folders/10EwKKO1SxHdZSWWO1ko2WUFIOIRZM0HU?usp=sharing). For the meantime, keep the folder in your computer and wait for further instructions during the class.
=======
2.  Download the entire folder `00-module-intro-r` from the [Google Drive link](https://drive.google.com/drive/folders/1Db2q9YPFU9Ik_a6ygmxgKHS3lpvtNxCu?usp=sharing). For the meantime, keep the folder in your computer and wait for further instructions during the class.
>>>>>>> ab7016f491a94ca40498fd58082a255490bab421

3.  Before the class start, open the RStudio and paste the following code in the console to install the required packages. Just click the clipboard icon to copy the code.

```{r}
#| eval: false

## install required packages
install.packages(c("janitor", "readxl", "haven", "tidyverse", "skimr"))
```

::: callout-warning
## Important

Please make sure to install the required packages before the class starts, as we may not have a secure internet connection. If you encounter any issues, please let me know.
:::
<<<<<<< HEAD


## Class demonstration copy

```{r}
#| eval: false

# INTRO TO R AND BASIC DATA WRANGLING ----

# working directory
## note: different working directory 
setwd("D:/Githu-repository/agec211-statistical-methods/agec211-class-demo/agec211-statistical-methods/00-module-intro-r")

## Install packages


# 1. R Packages ----
library(haven)
library(tidyverse)
library(readxl)
library(gapminder)
library(plotly)

# 2. Set the working directory ----


# 3. Reading data into R ----

## 3.1 CSV files
### Load swimming_pools.csv files using the read_csv() function
swimming_pool_dta <- read_csv("sample_dataset/swimming_pools.csv")
swimming_pool_dta

select(hbat_sav, id, ends_with("2"))



### Load potatoes.csv using read_csv() and read.csv()
#### Observe the difference in the output
read.csv("sample_dataset/swimming_pools.csv")

## 3.2 Excel files
### Load urban_pop files and use the read_xls() and read_excel() functions
### Save the data into a variable named urban_pop

urban_pop_dta <- read_xls("sample_dataset/urbanpop.xls")
urban_pop_dta <- read_excel("sample_dataset/urbanpop.xlsx")


### Transform the urban_pop data into long-format


## 3.2 SPSS files
### Load HBAT.sav
## Alt + -
hbat_sav <- read_sav("sample_dataset/HBAT.sav")

hbat_sav
glimpse(hbat_sav)


### Load data from Stata online @ https://www.stata-press.com/data/r9/u.html
### Use the link http://www.stata-press.com/data/r9/auto.dta and save the data into a variable named auto
auto_dta <- read_dta("http://www.stata-press.com/data/r9/auto.dta")

auto_dta

ggplot(data = auto_dta,
       aes(price, weight)) +
  geom_point() +
  geom_smooth()


## 3.3 Load SAS data
### Read the SAS data from the eventrepository.sas7bdat file
### Clean the variable names using the clean_names() function from janitor package

even_dta <- read_sas("sample_dataset/eventrepository.sas7bdat")



# 4. Basic data wrangling with tidyverse ----
### Use gapminder dataset from gapminder package and save it into a variable named gapminder_data

## 4.1 filter() ----
### Using the gapminder_data, filter dataset for the year 1957
gapminder
gapminder_1957 <- filter(gapminder, year == 1957)


### Now, filter for Philippines in 2002
filter(gapminder, year == 2002, country == "Philippines")


### Filter for the year 1957, then arrange in descending order of population
gapminder_1957 <- filter(gapminder, year == 1957)
arrange(gapminder_1957, desc(pop))

gapminder %>% 
  filter(year == 1957) %>% 
  arrange(desc(pop))



## 4.2 mutate() ----
### Use mutate to compute for GDP
gapminder_gdp_dta <- mutate(gapminder, GDP = pop * gdpPercap)


### Filter for year 2007, compute GDP in Million and arrange data by descending life expectancy
gapminder_2007 <- filter(gapminder, year == 2007)
gapminder_pop_mill_dta <- mutate(gapminder_2007, GDP = (pop * gdpPercap) / 1e6)
gapminder_pop_mill_arranged <- arrange(gapminder_pop_mill_dta, desc(lifeExp))

### Ctrl + Shift + M
gapminder_arranged <- 
  gapminder %>% 
  filter(year == 2007) %>% 
  mutate(GDP = (pop * gdpPercap) / 1e6) %>% 
  arrange(desc(lifeExp))

gapminder_arranged


## 4.6 grouping and summarizing ----
### Summarise to find the median life expectancy
gapminder %>% summarise(median_lifeExp = median(lifeExp))

gapminder %>% 
  group_by(year) %>% 
  summarise(median_lifeExp = median(lifeExp))

gapminder %>% 
  group_by(year) %>% 
  summarise(median_lifeExp = median(lifeExp)) %>% 
  ggplot(aes(year, median_lifeExp)) +
  geom_point() +
  geom_line()
  

### Filter for 1957 then summarise the median life expectancy

gapminder %>% 
  filter(year == 1957) %>% 
  summarise(median_lifeExp = median(lifeExp))


### Find median life expectancy and maximum GDP per capita in each year
gapminder %>% 
  group_by(year) %>% 
  summarise(median_lifeExp = median(lifeExp),
            max_GDPperCap = max(gdpPercap))


# BONUS: Let's have a sample visualization with gapminder dataset
## Run the code below and see the output

gapminder %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
  geom_point(alpha = 0.8) +
  scale_x_log10() +
  scale_size(range = c(0.1, 20), name = "Population") +
  labs(x = "GDP per Capita",
       y = "Life Expectancy (years)",
       title = "World Development in  2007") +
  theme_light() +
  theme(legend.position = "none")


plot_gapminder <- 
  gapminder %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
  geom_point(alpha = 0.8) +
  scale_x_log10() +
  scale_size(range = c(0.1, 20), name = "Population") +
  labs(x = "GDP per Capita",
       y = "Life Expectancy (years)",
       title = "World Development in  2007") +
  theme_light() +
  theme(legend.position = "none")


ggplotly(plot_gapminder)




```















=======
>>>>>>> ab7016f491a94ca40498fd58082a255490bab421
